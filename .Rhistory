1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,10,by=0.5)
play()
?seq
nxt()
seq(1,10,by=0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep((0,1,2), time=10)
rep(c(0,1,2), time=10)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(-.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect > 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Mike")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X", "Y", "Z"), collapse="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
quit()
library("swirl")
swirl()
info()
main()
bye()
swirl()
info()
main()
x <- c(44, NA, 5 ,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
main()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
bye()
quit()
library("swirl")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char = c("My","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Mike")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
legth(unique_vals)
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
?count
??count
??rows
?head
??row
??row
??row
?tail
?is.na
?sum
?sapply
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
exit
bye()
swirl
swirl()
menu()
main()
quit()
?mean
?sapply
library(datasets)
data(iris)
headers(iris)
head(iris)
?gl
tapply(iris[[, Sepal.Length]], iris[[ ,Species]], mean)
tapply(iris[, Sepal.Length], iris[ ,Species], mean)
tapply(iris[, Sepal.Length], iris[, Species], mean)
iris[, Species]
class(iris)
iris[[, Species]]
iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
head(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
cyl_hp = tapply(mtcars$hp, mtcars$cyl, mean)
class(cyl_hp)
lapply(split(mtcars$hp, mtcars$cyl), mean)
cyl_hp = lapply(split(mtcars$hp, mtcars$cyl), mean)
cyl_hp$8 - cyl_hp$4
cyl_hp[[8]] - cyl_hp[[4]]
cyl_hp[8]
cyl_hp[`8`]
cyl_hp[[`8`]
]
cyl_hp[[`8`]]
cyl_hp[['8']]
cyl_hp[['8']] - cyl_hp[['4']]
debug(ls)
ls
?tapply
?apply
?rbind
?min
?sapply
?tapply
?aggregate
?aggregate
?tapply
?apply
?order
?vector first
?tapply
?order
?tapply
?min
?mean
?split
?tapply
?ddply
install.packages("RMySQL")
library('RMySQL')
version()
install.packages(c("manipulate", "mgcv"))
library('RMySQL')
install.packages("RMySQL")
library('RMySQL')
h <- dbConnect(MySQL(), host="192.168.156.105")
?dbConnect
?MySQL
h <- dbConnect(MySQL(), host="192.168.156.105", user="dscourse")
library('RMySQL')
h <- dbConnect(MySQL(), host="192.168.156.105", user="dscourse")
dbGetQuery(h, "show databases;")
dbDisconnect(h);
source("http://bioconductor.org/biocLite.R")
biocLite("hdf5")
biocLite("rhdf5")
library(httr)
packages.install('httr')
install.packages('httr')
library('httr')
oauth_endpoints("github")
myapp <- oauth_app("github", "1fe2d40579604406c0f8")
myapp <- oauth_app("github", "1fe2d40579604406c0f8", "1689ed2a51b40f12598907fff73cd7a20bf56384")
token <- oauth2.0_token(oauth_endpoints("github"), token)
token <- oauth2.0_token(oauth_endpoints("github"), myapp)
token <- oauth2.0_token(oauth_endpoints("github"), myapp)
token
?seq_along
?rbind
?factor
?read.table
install.packages('swirl')
library('swirl')
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb=size_mb / 2^10)
mutate(cran3, size_gb = size_mb / 2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
?filter
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
top_counts_sorted <- arrange(top_counts, desc(counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
?bind_rows
bind_rows(passed, failed)
sat
?gather
?separate
t <- select(sat, -contains("total"))
t
t2 <- gather(t, part_sex, count, -score_range)
t2
submit()
submit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
p <- xyplot(weight ~ Time | Diet, BodyWeight)
p
p
class(p)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?print_trellis
?trellis.par.set
?splom
library(datasets)
data(airquality)
str(aitrquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
packages.include('ggplot')
include.packages('ggplot2')
?load.packages
?packages
?package
?install.packages
install.packages('ggplot2')
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
v <- read.csv(unz("activity.zip", "activity.csv"))
setwd("C://Users/Mike/Documents/Reproducible Research/")
v <- read.csv(unz("activity.zip", "activity.csv"))
files()
list.files()
setwd("C://Users/Mike/Documents/Reproducible Research/RepData_PeerAssessment1/")
v <- read.csv(unz("activity.zip", "activity.csv"))
v$date
sapply(v$date, function(x) as.Date(v$date, "%Y-%m-%d"))
sapply(v$date, function(x) as.Date(x, "%Y-%m-%d"))
sapply(v$date, function(x) weekdays(as.Date(x, "%Y-%m-%d")))
as.Data(v$date, "%Y-%m-%d")
as.Date(v$date, "%Y-%m-%d")
weekdays(as.Date(v$date, "%Y-%m-%d"))
sapply(weekdays(as.Date(v$date, "%Y-%m-%d")), function(x) ifelse(x == "Sunday" || x == "Saturday", "weekend", "weekday"))
t = sapply(weekdays(as.Date(v$date, "%Y-%m-%d")), function(x) ifelse(x == "Sunday" || x == "Saturday", "weekend", "weekday"))
t
class(t)
v$dayType = sapply(weekdays(as.Date(v$date, "%Y-%m-%d")), function(x) ifelse(x == "Sunday" || x == "Saturday", "weekend", "weekday"))
v
?plot
v
ggplot(v, aes(interval, steps))+facet_wrap(~dayType, ncol=1)
library(ggplot2)
ggplot(v, aes(interval, steps))+facet_wrap(~dayType, ncol=1)
v
head(v)
ggplot(v, aes(interval, steps))+geom_line()+facet_wrap(~dayType, ncol=1)
aggregate(v, steps ~ interval + dayType, mean)
aggregate(v, steps ~ interval, dayType, mean)
head(v)
?aggregate
aggregate(steps ~ interval + dayType, data=v, mean)
ggplot(v, aes(interval, steps))+geom_line()+facet_wrap(~dayType, ncol=1)
v
v1 <- aggregate(steps ~ interval + dayType, data=v, mean)
ggplot(v1, aes(interval, steps))+geom_line()+facet_wrap(~dayType, ncol=1)
